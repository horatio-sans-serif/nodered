#!/bin/sh

name=$1
host=$2
port=$3
db=$4

if [ -z $name ]; then
  echo "$0 <name> [<redis host> [<redis port> [<redis db number>]]]"
  echo 
  echo "defaults:"
  echo "  <redis host>          127.0.0.1"
  echo "  <redis port>          6379"
  echo "  <redis db number>     1"
  exit
fi

[[ -z $host ]] && host=127.0.0.1
[[ -z $port ]] && port=6379
[[ -z $db   ]] && db=1

echo
echo "\033[1mWARNING!\033[0m"
echo 
echo "This script will reset the state of a NodeRed node"
echo "as stored in Redis."
echo
echo "A NodeRed node cleans up after itself in Redis on a"
echo "clean shutdown (kill \$pid, ^C (SIGINT), etc.).  But,"
echo "when forcibly shutdown (kill -9, hardware failure, etc.),"
echo "the node has no chance to clean up after itself."
echo "This script will do such clean up ex post facto."
echo
echo "You have requested to reset the Redis state of node"
echo
echo "        \033[7m$name\033[0m"
echo
echo "in the Redis instance at \033[7m$host:$port (db $db)\033[0m"
echo
echo "\033[1mAre you sure you want to do this (enter YES or NO):\033[0m "

read answer

if [ "$answer" != "YES" ]; then
  echo
  echo "\033[7mCANCELED!\033[0m"
  echo
  exit 1
fi

echo

execRedis() {
  label=$0
  redis-cli -n $db -h $host -p $port $* | sed 's/^\d\.\s*//'
}

# Determine the node's ID at nr:cluster, which is a ZSET of 
# nodeName (key) => nodeID (score).

nodeID=$(execRedis "zscore nr:cluster $name")

if [ $nodeID = "(nil)" ]; then 
  echo "\033[7mNode $name not found in cluster metadata!\033[0m"
  exit 1
fi

echo "Removing node from cluster" 
execRedis "zrem nr:cluster $name"

echo "Removing the node metadata" 
execRedis "del nr:cluster:$nodeID"

echo "Removing any nicknames of clients that were connected"
execRedis "zremrangebyscore nr:nicks $nodeID $nodeID"

echo "\033[7mDONE!\033[0m"
